/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SHELLDBUS_H__
#define __SHELLDBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for local.ShellApp.ShnInterface */

#define TYPE_SHN_INTERFACE (shn_interface_get_type ())
#define SHN_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SHN_INTERFACE, ShnInterface))
#define IS_SHN_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SHN_INTERFACE))
#define SHN_INTERFACE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SHN_INTERFACE, ShnInterfaceIface))

struct _ShnInterface;
typedef struct _ShnInterface ShnInterface;
typedef struct _ShnInterfaceIface ShnInterfaceIface;

struct _ShnInterfaceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_acinfo) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_asr_screen_type) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_audio_setting_info) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_background) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_bt_setting_info) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_call_info) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_display_setting_info) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_drive_warning) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_handfree_state) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_illstatus) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_language) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_mix_volume) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_phone_btmac) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_phone_status) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_quickbar_info) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_system_setting_info) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_vehicle_setting_info) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_version_info) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_is_navi_exist) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_send_reverse_to_dbus) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    gint arg_type,
    gint arg_wpram,
    gint arg_lpram);

  gboolean (*handle_send_to_dbus) (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    gint arg_from,
    gint arg_type,
    gint arg_wpram,
    GVariant *arg_lpram);

  void (*message) (
    ShnInterface *object,
    gint arg_from,
    gint arg_type,
    gint arg_wpram,
    GVariant *arg_lpram);

  void (*reverse_message) (
    ShnInterface *object,
    gint arg_type,
    gint arg_wpram,
    gint arg_lpram);

};

GType shn_interface_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *shn_interface_interface_info (void);
guint shn_interface_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void shn_interface_complete_send_to_dbus (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

void shn_interface_complete_send_reverse_to_dbus (
    ShnInterface *object,
    GDBusMethodInvocation *invocation);

void shn_interface_complete_get_quickbar_info (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_illstatus (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);

void shn_interface_complete_get_language (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);

void shn_interface_complete_get_phone_status (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);

void shn_interface_complete_get_acinfo (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_vehicle_setting_info (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_audio_setting_info (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_display_setting_info (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_system_setting_info (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_bt_setting_info (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_version_info (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_drive_warning (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_asr_screen_type (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);

void shn_interface_complete_get_call_info (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_get_mix_volume (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);

void shn_interface_complete_get_phone_btmac (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void shn_interface_complete_is_navi_exist (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg0);

void shn_interface_complete_get_background (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);

void shn_interface_complete_get_handfree_state (
    ShnInterface *object,
    GDBusMethodInvocation *invocation,
    guchar unnamed_arg0);



/* D-Bus signal emissions functions: */
void shn_interface_emit_message (
    ShnInterface *object,
    gint arg_from,
    gint arg_type,
    gint arg_wpram,
    GVariant *arg_lpram);

void shn_interface_emit_reverse_message (
    ShnInterface *object,
    gint arg_type,
    gint arg_wpram,
    gint arg_lpram);



/* D-Bus method calls: */
void shn_interface_call_send_to_dbus (
    ShnInterface *proxy,
    gint arg_from,
    gint arg_type,
    gint arg_wpram,
    GVariant *arg_lpram,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_send_to_dbus_finish (
    ShnInterface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_send_to_dbus_sync (
    ShnInterface *proxy,
    gint arg_from,
    gint arg_type,
    gint arg_wpram,
    GVariant *arg_lpram,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_send_reverse_to_dbus (
    ShnInterface *proxy,
    gint arg_type,
    gint arg_wpram,
    gint arg_lpram,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_send_reverse_to_dbus_finish (
    ShnInterface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_send_reverse_to_dbus_sync (
    ShnInterface *proxy,
    gint arg_type,
    gint arg_wpram,
    gint arg_lpram,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_quickbar_info (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_quickbar_info_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_quickbar_info_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_illstatus (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_illstatus_finish (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_illstatus_sync (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_language (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_language_finish (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_language_sync (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_phone_status (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_phone_status_finish (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_phone_status_sync (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_acinfo (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_acinfo_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_acinfo_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_vehicle_setting_info (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_vehicle_setting_info_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_vehicle_setting_info_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_audio_setting_info (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_audio_setting_info_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_audio_setting_info_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_display_setting_info (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_display_setting_info_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_display_setting_info_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_system_setting_info (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_system_setting_info_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_system_setting_info_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_bt_setting_info (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_bt_setting_info_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_bt_setting_info_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_version_info (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_version_info_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_version_info_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_drive_warning (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_drive_warning_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_drive_warning_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_asr_screen_type (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_asr_screen_type_finish (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_asr_screen_type_sync (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_call_info (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_call_info_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_call_info_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_mix_volume (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_mix_volume_finish (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_mix_volume_sync (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_phone_btmac (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_phone_btmac_finish (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_phone_btmac_sync (
    ShnInterface *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_is_navi_exist (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_is_navi_exist_finish (
    ShnInterface *proxy,
    gboolean *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_is_navi_exist_sync (
    ShnInterface *proxy,
    gboolean *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_background (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_background_finish (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_background_sync (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void shn_interface_call_get_handfree_state (
    ShnInterface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean shn_interface_call_get_handfree_state_finish (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean shn_interface_call_get_handfree_state_sync (
    ShnInterface *proxy,
    guchar *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_SHN_INTERFACE_PROXY (shn_interface_proxy_get_type ())
#define SHN_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SHN_INTERFACE_PROXY, ShnInterfaceProxy))
#define SHN_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SHN_INTERFACE_PROXY, ShnInterfaceProxyClass))
#define SHN_INTERFACE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SHN_INTERFACE_PROXY, ShnInterfaceProxyClass))
#define IS_SHN_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SHN_INTERFACE_PROXY))
#define IS_SHN_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SHN_INTERFACE_PROXY))

typedef struct _ShnInterfaceProxy ShnInterfaceProxy;
typedef struct _ShnInterfaceProxyClass ShnInterfaceProxyClass;
typedef struct _ShnInterfaceProxyPrivate ShnInterfaceProxyPrivate;

struct _ShnInterfaceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ShnInterfaceProxyPrivate *priv;
};

struct _ShnInterfaceProxyClass
{
  GDBusProxyClass parent_class;
};

GType shn_interface_proxy_get_type (void) G_GNUC_CONST;

void shn_interface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ShnInterface *shn_interface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ShnInterface *shn_interface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void shn_interface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ShnInterface *shn_interface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ShnInterface *shn_interface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SHN_INTERFACE_SKELETON (shn_interface_skeleton_get_type ())
#define SHN_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SHN_INTERFACE_SKELETON, ShnInterfaceSkeleton))
#define SHN_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SHN_INTERFACE_SKELETON, ShnInterfaceSkeletonClass))
#define SHN_INTERFACE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SHN_INTERFACE_SKELETON, ShnInterfaceSkeletonClass))
#define IS_SHN_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SHN_INTERFACE_SKELETON))
#define IS_SHN_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SHN_INTERFACE_SKELETON))

typedef struct _ShnInterfaceSkeleton ShnInterfaceSkeleton;
typedef struct _ShnInterfaceSkeletonClass ShnInterfaceSkeletonClass;
typedef struct _ShnInterfaceSkeletonPrivate ShnInterfaceSkeletonPrivate;

struct _ShnInterfaceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ShnInterfaceSkeletonPrivate *priv;
};

struct _ShnInterfaceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType shn_interface_skeleton_get_type (void) G_GNUC_CONST;

ShnInterface *shn_interface_skeleton_new (void);


G_END_DECLS

#endif /* __SHELLDBUS_H__ */
